package ec.gp.cuda;

import com.sir_m2x.transscale.pointers.CudaPrimitive2D;

import ec.EvolutionState;
import ec.Individual;
import ec.gp.GPProblem;
import ec.simple.SimpleProblemForm;
import ec.util.Parameter;

/**
 * An extension of ECJ's GPProblem which mandates having a problem size
 * parameter in the ECJ's parameter file. Users of this class can access
 * the number of training instances in the problem.
 * 
 * @author Mehran Maghoumi
 *
 */
public abstract class CudaProblem extends GPProblem implements SimpleProblemForm {
	private static final long serialVersionUID = -4206807496360216888L;
	
	public static final String P_SIZE = "size";	

	/** The size of the problem (i.e. the number of training instances) */
	protected int problemSize = -1;
	
	@Override
	public void setup(EvolutionState state, Parameter base) {
		super.setup(state, base);
		
		this.problemSize = state.parameters.getInt(base.push(P_SIZE), null);
	}
	
	/**
	 * Assigns the fitness of the provided individual based on the evaluation results
	 * that were passed back by CUDA. Depending on your problem, you should convert the
	 * output results of CUDA to a representation that matches your problem and should
	 * convert the values to a fitness value that would be then assigned to the individual.
	 * You do not need to set ind.evaluated = true as that will be done automatically.
	 * 
	 * @param state	The EvolutionState
	 * @param ind	The individual to assign the fitness to
	 * @param kernelResults
	 * 			The kernel results generated by CUDA for the current individual. 
	 */
	public abstract void assignFitness(EvolutionState state, Individual ind, KernelOutputData kernelResults);
	
}
